---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  CLUSTER_SECRET_SOPS_FILE: "{{.KUBERNETES_DIR}}/flux/vars/cluster-secrets.sops.yaml"
  CLUSTER_SETTINGS_FILE: "{{.KUBERNETES_DIR}}/flux/vars/cluster-settings.yaml"
  GITHUB_DEPLOY_KEY_FILE: "{{.KUBERNETES_DIR}}/bootstrap/flux/github-deploy-key.sops.yaml"
  AGE_KEY_FILE: "{{.KUBERNETES_DIR}}/bootstrap/flux/age-key.sops.yaml"

tasks:

  bootstrap:
    desc: Bootstrap Flux into a Kubernetes cluster
    summary: |
      Args:
        cluster: Cluster to run command against (required)
    prompt: Bootstrap Flux into the '{{.cluster}}' cluster ... continue?
    cmds:
      # Install Flux
      - kubectl --context {{.cluster}} apply --server-side --kustomize {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/flux
      # Install secrets and configmaps
      - sops --decrypt {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/flux/age-key.secret.sops.yaml | kubectl --context {{.cluster}} apply --server-side --filename -
      - sops --decrypt {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/flux/github-deploy-key.secret.sops.yaml | kubectl --context {{.cluster}} apply --server-side --filename -
      - sops --decrypt {{.KUBERNETES_DIR}}/{{.cluster}}/flux/vars/cluster-secrets.secret.sops.yaml | kubectl --context {{.cluster}} apply --server-side --filename -
      - kubectl --context {{.cluster}} apply --server-side --filename {{.KUBERNETES_DIR}}/{{.cluster}}/flux/vars/cluster-settings.yaml
      # Install Flux Kustomization resources
      - kubectl --context {{.cluster}} apply --server-side --kustomize {{.KUBERNETES_DIR}}/{{.cluster}}/flux/config
    requires:
      vars: ["cluster"]
    preconditions:
      - test -f {{.ROOT_DIR}}/age.key
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/flux/age-key.secret.sops.yaml
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/flux/github-deploy-key.secret.sops.yaml
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/flux/vars/cluster-settings.yaml
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/flux/vars/cluster-secrets.secret.sops.yaml
      - sops --decrypt {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/flux/age-key.secret.sops.yaml
      - sops --decrypt {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/flux/github-deploy-key.secret.sops.yaml
      - sops --decrypt {{.KUBERNETES_DIR}}/{{.cluster}}/flux/vars/cluster-secrets.secret.sops.yaml

  apply:
    desc: Apply a Flux Kustomization resource for a cluster
    summary: |
      Args:
        cluster: Cluster to run command against (required)
        path: Path to the Flux Kustomization resource (required)
        ns: Namespace the Flux Kustomization exists in (default: flux-system)
    cmd: |
      flux --context {{.cluster}} build ks $(basename {{.path}}) \
          --namespace {{.ns}} \
          --kustomization-file {{.KUBERNETES_DIR}}/{{.cluster}}/apps/{{.path}}/ks.yaml \
          --path {{.KUBERNETES_DIR}}/{{.cluster}}/apps/{{.path}} \
          {{- if contains "not found" .ks }}--dry-run \{{ end }}
      | \
      kubectl --context {{.cluster}} apply --server-side \
          --field-manager=kustomize-controller -f -
    requires:
      vars: ["cluster", "path"]
    vars:
      ns: '{{.ns | default "flux-system"}}'
      ks:
        sh: flux --context {{.cluster}} --namespace {{.ns}} get kustomizations $(basename {{.path}}) 2>&1
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/apps/{{.path}}/ks.yaml

  reconcile:
    desc: Force update Flux to pull in changes from your Git repository
    cmd: flux  reconcile kustomization cluster --with-source --namespace flux-system --kubeconfig {{.KUBECONFIG_FILE}}
    preconditions:
      - msg: Missing kubeconfig
        sh: test -f {{.KUBECONFIG_FILE}}

  github-deploy-key:
    cmds:
      - kubectl create namespace flux-system --dry-run=client -o yaml | kubectl --kubeconfig {{.KUBECONFIG_FILE}} apply --filename -
      - sops --decrypt {{.GITHUB_DEPLOY_KEY_FILE}} | kubectl apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side --filename -
    preconditions:
      - msg: Missing kubeconfig
        sh: test -f {{.KUBECONFIG_FILE}}
      - msg: Missing Sops Age key file
        sh: test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/flux/age-key.secret.sops.yaml
      - msg: Missing Github deploy key file
        sh: test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/flux/github-deploy-key.secret.sops.yaml
    requires:
      vars: ["cluster"]

  gr-sync:
    desc: Sync Flux GitRepositories
    cmds:
      - |
        kubectl get gitrepositories --context {{.cluster}} --all-namespaces --no-headers | awk '{print $1, $2}' \
          | xargs --max-procs=4 -l bash -c \
            'kubectl --context {{.cluster}} -n $0 annotate gitrepository/$1 reconcile.fluxcd.io/requestedAt=$(date +%s) --field-manager=flux-client-side-apply --overwrite'
    requires:
      vars: ["cluster"]
    preconditions:
      - msg: Missing kubeconfig
        sh: test -f {{.KUBECONFIG_FILE}}

  ks-sync:
    desc: Sync Flux Kustomizations
    cmds:
      - |
        kubectl get kustomization --context {{.cluster}} --all-namespaces --no-headers | awk '{print $1, $2}' \
          | xargs --max-procs=4 -l bash -c \
            'kubectl --context {{.cluster}} -n $0 annotate kustomization/$1 reconcile.fluxcd.io/requestedAt="$(date +%s)" --field-manager=flux-client-side-apply --overwrite'
    requires:
      vars: ["cluster"]
    preconditions:
      - msg: Missing kubeconfig
        sh: test -f {{.KUBECONFIG_FILE}}

  ks-resume:
    desc: Resume all Flux Kustomizations
    cmds:
      - |
        flux get kustomization --kubeconfig {{.KUBECONFIG_FILE}} --all-namespaces --no-header | awk '{print $1, $2}' \
          | xargs -l bash -c 'flux -n $0 resume kustomization $1'
    preconditions:
      - msg: Missing kubeconfig
        sh: test -f {{.KUBECONFIG_FILE}}

  hr-sync:
    desc: Sync Flux HelmReleases
    cmds:
      - |
        kubectl get helmreleases --kubeconfig {{.KUBECONFIG_FILE}} --all-namespaces --no-headers | awk '{print $1, $2}' \
          | xargs --max-procs=4 -l bash -c \
            'kubectl --kubeconfig {{.KUBECONFIG_FILE}} -n $0 annotate helmrelease/$1 reconcile.fluxcd.io/requestedAt="$(date +%s)" --overwrite'
    preconditions:
      - msg: Missing kubeconfig
        sh: test -f {{.KUBECONFIG_FILE}}

  tf-sync:
    desc: Sync Flux Terraforms
    cmds:
      - |
        kubectl get terraforms --kubeconfig {{.KUBECONFIG_FILE}} --all-namespaces --no-headers | awk '{print $1, $2}' \
          | xargs --max-procs=4 -l bash -c \
            'kubectl -n $0 annotate terraform/$1 reconcile.fluxcd.io/requestedAt="$(date +%s)" --kubeconfig {{.KUBECONFIG_FILE}} --overwrite'
    preconditions:
      - msg: Missing kubeconfig
        sh: test -f {{.KUBECONFIG_FILE}}

  hr-suspend:
    desc: Suspend all Flux HelmReleases
    cmds:
      - |
        flux get helmrelease --all-namespaces --no-header | awk '{print $1, $2}' \
          | xargs -l bash -c 'flux -n $0 suspend helmrelease $1'

  hr-resume:
    desc: Resume all Flux HelmReleases
    cmds:
      - |
        flux get helmrelease --all-namespaces --no-header | awk '{print $1, $2}' \
          | xargs -l bash -c 'flux -n $0 resume helmrelease $1'

  hr-fix:
    cmds:
      - kubectl --kubeconfig {{.KUBECONFIG_FILE}} -n {{.namespace}} delete secret -l owner=helm,name={{.release}},status=pending-upgrade
      - flux -n {{.namespace}} reconcile hr {{.release}}
    vars:
      release: '{{ or .release (fail "HelmRelease `release` is required") }}'
      namespace: '{{.namespace | default "default"}}'
    preconditions:
      - msg: Missing kubeconfig
        sh: test -f {{.KUBECONFIG_FILE}}


  toggle-postgres:
    cmds:
      - |
        flux get helmrelease --all-namespaces --no-header --label-selector "app.home.arpa/postgres" \
            | awk '{print $1, $2, $4}' \
            | xargs -l bash -c '
                if [ "$2" == "True" ]; then
                    flux -n $0 resume helmrelease $1;
                else
                    flux -n $0 suspend helmrelease $1;
                    kubectl get deployment,statefulset --kubeconfig {{.KUBECONFIG_FILE}} --all-namespaces --no-headers --selector "helm.toolkit.fluxcd.io/name=$1" \
                        | awk '\''{print $1, $2}'\'' \
                        | xargs -l bash -c '\''kubectl -n $0 scale $1 --replicas 0'\''
                fi
              '
    preconditions:
      - msg: Missing kubeconfig
        sh: test -f {{.KUBECONFIG_FILE}}
